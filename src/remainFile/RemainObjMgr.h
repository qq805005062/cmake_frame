#ifndef __REMAIN_MGR_OBJECT_H__#define __REMAIN_MGR_OBJECT_H__#include <memory>#include <vector>#include "src/Singleton.h"#include "src/noncopyable.h"#define REMAIN_OBJMGR_RE_FLAG       1#define REMAIN_OBJMGR_MO_FLAG       2#define REMAIN_OBJMGR_MT_FLAG       3
namespace REMAIN_MGR{/* *电话号码、扩展字段、custid、短信内容 base64之后写，解出来和写进去要注意，不然就咯咯了 * * * * */class RemainObj{public:    RemainObj()        :m_nMsgFmt(0)        ,bitFlag_(0)        ,m_nPkNumber(0)        ,m_nPkTotal(0)        ,m_nPhoneCount(0)        ,m_strUserId()        ,m_nPtMsgId()        ,m_strPhone()        ,m_strMsgContent()        ,m_strUserCustid()        ,m_strUserExData()        ,m_strUserIpaddr()        ,m_strSpgateNo()        ,m_strExNo()        ,state_()        ,m_strSendTime()        ,m_strRecvTime()    {    }    RemainObj(const RemainObj& that)        :m_nMsgFmt(0)        ,bitFlag_(0)        ,m_nPkNumber(0)        ,m_nPkTotal(0)        ,m_nPhoneCount(0)        ,m_strUserId()        ,m_nPtMsgId()        ,m_strPhone()        ,m_strMsgContent()        ,m_strUserCustid()        ,m_strUserExData()        ,m_strUserIpaddr()        ,m_strSpgateNo()        ,m_strExNo()        ,state_()        ,m_strSendTime()        ,m_strRecvTime()    {        *this = that;    }    RemainObj& operator=(const RemainObj& that)    {        if (this == &that) return *this;        m_nMsgFmt = that.m_nMsgFmt;        bitFlag_ = that.bitFlag_;        m_nPkNumber = that.m_nPkNumber;        m_nPkTotal = that.m_nPkTotal;        m_nPhoneCount = that.m_nPhoneCount;        m_strUserId = that.m_strUserId;        m_nPtMsgId = that.m_nPtMsgId;        m_strPhone = that.m_strPhone;        m_strMsgContent = that.m_strMsgContent;        m_strUserCustid = that.m_strUserCustid;        m_strUserExData = that.m_strUserExData;        m_strUserIpaddr = that.m_strUserIpaddr;        m_strSpgateNo = that.m_strSpgateNo;        m_strExNo = that.m_strExNo;        state_ = that.state_;        m_strSendTime = that.m_strSendTime;        m_strRecvTime = that.m_strRecvTime;        return *this;    }
    ~RemainObj()    {    }    void setRemainMsgFmt(unsigned char nMsgFmt)    {        m_nMsgFmt = nMsgFmt;    }    unsigned char remainMsgFmt()    {        return m_nMsgFmt;    }    void setRemainBitFlag(int flag)    {        bitFlag_ = flag;    }    int remainBitFlag()    {        return bitFlag_;    }    void setRemainPkNum(int nPkNumber)    {        m_nPkNumber = nPkNumber;    }    int remainPkNum()    {        return m_nPkNumber;    }    void setRemainPkTotal(int nPkTatol)    {        m_nPkTotal = nPkTatol;    }    int remainPkTotal()    {        return m_nPkTotal;    }    void setRemainPhoneCount(int count)    {        m_nPhoneCount = count;    }    int remainPhoneCount()    {        return m_nPhoneCount;    }    void setRemainUserId(const std::string& strUserId)    {        m_strUserId.assign(strUserId);    }    std::string remainUserId()    {        return m_strUserId;    }    void setRemainPtMsgId(const std::string& nPtMsgId)    {        m_nPtMsgId.assign(nPtMsgId);    }    void setRemainPtMsgId(const char* pChar, size_t len)    {        m_nPtMsgId.assign(pChar, len);    }    std::string remainPtMsgId()    {        return m_nPtMsgId;    }    void setRemainStrPhone(const std::string& strPhone)    {        m_strPhone.assign(strPhone);    }    std::string remainStrPhone()    {        return m_strPhone;    }    void setRemainMsgContent(const std::string& strMsgContent)    {        m_strMsgContent.assign(strMsgContent);    }    std::string remainMsgContent()    {        return m_strMsgContent;    }    void setRemainUserCustid(const std::string& custId)    {        m_strUserCustid.assign(custId);    }    std::string remainUserCustid()    {        return m_strUserCustid;    }    void setRemainUserExData(const std::string& strUserExData)    {        m_strUserExData.assign(strUserExData);    }    std::string remainUserExData()    {        return m_strUserExData;    }    void setRemainUserIpaddr(const std::string& userIpddr)    {        m_strUserIpaddr.assign(userIpddr);    }    std::string remainUserIpaddr()    {        return m_strUserIpaddr;    }    void setRemainSpgateNo(const std::string& gateNo)    {        m_strSpgateNo.assign(gateNo);    }    std::string remainSpgateNo()    {        return m_strSpgateNo;    }    void setRemainExNo(const std::string& exNo)    {        m_strExNo.assign(exNo);    }    std::string remainExNo()    {        return m_strExNo;    }    void setRemainState(const std::string& state)    {        state_.assign(state);    }    std::string remainState()    {        return state_;    }    void setRemainSendTime(const std::string& sendtime)    {        m_strSendTime.assign(sendtime);    }    std::string remainSendTime()    {        return m_strSendTime;    }    void setRemainRecvTime(const std::string& recvtime)    {        m_strRecvTime.assign(recvtime);    }    std::string remainRecvTime()    {        return m_strRecvTime;    }    unsigned char m_nMsgFmt;            //编码方式    int bitFlag_;                       //参考文件上方的宏定义，区分各种状态    int m_nPkNumber;                    //上行状态报告数(长短信用:非长短信为0,长短信:对应拆分的条数)    int m_nPkTotal;    int m_nPhoneCount;    std::string m_strUserId;            //用户账号    std::string m_nPtMsgId;             //8个字节的的内存，区分正负号，注意转换    std::string m_strPhone;             //可以写多个号码    std::string m_strMsgContent;        //消息内容    std::string m_strUserCustid;    std::string m_strUserExData;        //用户扩展字段    std::string m_strUserIpaddr;        //用户接入的ip地址    std::string m_strSpgateNo;          //通道号    std::string m_strExNo;              //用户扩展子号    std::string state_;                 //状态,仅仅对状态报告有效    std::string m_strSendTime;          //发送时间yyyymmddHHMMSS    std::string m_strRecvTime;          //接收时间yyyymmddHHMMSS};typedef std::shared_ptr<RemainObj> RemainObjPtr;typedef std::vector<RemainObjPtr> RemainObjPtrVect;/**标志位参考文件上方宏定义，分别是状态包、上行短信、下行短信*读文件优先读本地路径下的信息，*写文件优先写共享路径下的信息**/class RemainObjMgr : public noncopyable{public:    RemainObjMgr();
    ~RemainObjMgr();
    static RemainObjMgr& instance() { return Singleton<RemainObjMgr>::instance();}    /*     *模块退出接口，清除所有资源     *     *     */    void remainObjMgrExit();
    /*     *第1个参数是网关编号     *第2个参数是每个文件最多保存多少条     *第3个参数是超时切换一个文件，单位秒钟     *第4个参数是共享目录路径，如果为空，则不处理共享目录，路径都是根目录，根目录下的路径就是固定的了     *第5个参数是本地目录路径，如果为空，默认是相对路径下的对应文件夹，路径都是根目录，根目录下的路径就是固定的了     *     *返回值，==0的时候表示正常，小于0表示错误     */    int remainObjMgrInit(uint32_t gateNo, int maxCount = 50, int outSeconds = 60, const std::string& sharePath = "", const std::string& localPath = "");
    /*     *写滞留，根据obj.bitFlag_区分类型     *     *返回值，==0的时候表示正常，小于0表示错误     */    int writeRemainObject(const RemainObjPtr& obj);    /*     *写滞留，根据obj.bitFlag_区分类型     *这个写进去之后就再也不会发送了，除非人工干预，下行接口慎重     *     *返回值，==0的时候表示正常，小于0表示错误     */    int writeRemainObjectBak(const RemainObjPtr& obj);
    /*     *读滞留，根据bitFlag区分读数据类型     *     *     *返回值，==0的时候表示正常，小于0表示错误     */    int readRemainObject(int bitFlag, const std::string& userId, RemainObjPtrVect& objVect);
    /*     *统计滞留数量，分别统计本地滞留数量，以及共享目录统计数量     *     *     *返回值，==0的时候表示正常，小于0表示错误     */    int statisticsRemainCount(int bitFlag, const std::string& userId, int& localCount, int& shareCount);    /*     *检索文件是否超时，超时则关闭文件     *     *     */    void everySecondCheck(uint64_t second = 0);    void updateGenFreq(int freq = 60);    void updateMaxFileSize(int size = 20);//////////////////////////////////////////////////////////////////////////////////////////////////    std::string transReToString(const RemainObjPtr& obj);    std::string transMoToString(const RemainObjPtr& obj);    std::string transMtToString(const RemainObjPtr& obj);private:    int transStringToRe(const char* pBuf, RemainObjPtrVect& objVect);    int transStringToMo(const char* pBuf, RemainObjPtrVect& objVect);    int transStringToMt(const char* pBuf, RemainObjPtrVect& objVect);    int transStringToObject(int bigFlag, const std::string& userId, const std::string& remainData, RemainObjPtrVect& objVect);    int isExit_;    int isInit_;    int gateNo_;    int maxCount_;    int outSecond_;    std::string sharePath_;    std::string localPath_;};
}#endif