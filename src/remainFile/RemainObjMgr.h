#ifndef __REMAIN_MGR_OBJECT_H__#define __REMAIN_MGR_OBJECT_H__#include <memory>#include <vector>#include "src/Singleton.h"#include "src/noncopyable.h"#define REMAIN_OBJMGR_RE_FLAG       1#define REMAIN_OBJMGR_MO_FLAG       2#define REMAIN_OBJMGR_MT_FLAG       3
namespace REMAIN_MGR{/* *电话号码、扩展字段、custid、短信内容 base64之后写，解出来和写进去要注意，不然就咯咯了 * * * * */class RemainObj{public:    RemainObj()        :m_nMsgFmt(0)        ,bitFlag_(0)        ,m_nPkNumber(0)        ,m_nPkTotal(0)        ,m_nPhoneCount(0)        ,m_nMsgLevel(0)        ,m_nEcid(0)        ,m_nPreNodeid(0)        ,m_nLocalNodeid(0)        ,m_nGateId(0)        ,m_nBatchType(0)        ,m_nRptFlag(0)        ,m_nRptFrom(0)        ,m_nTpudhi(0)        ,m_nTppid(0)        ,m_nLongMsgSeq(0)        ,m_nChargeNum(0)        ,m_nSignPos(0)        ,m_nFileSize(0)        ,m_nMmstype(0)        ,m_nMobileCountry(0)        ,m_nMobileArea(0)        ,m_nMobileCity(0)        ,m_nMobileType(0)        ,m_nFeeFlag(0)        ,m_nChargeType(0)        ,m_nChargeRate(0)        ,m_nMsgSeqId(0)        ,m_nDttype(0)        ,m_nSendFlag(0)        ,m_nPassThrough(0)        ,m_nPtMsgId(0)        ,m_nSuppMsgId(0)        ,m_nInitMgsId(0)        ,m_nCreateTime(0)        ,m_nRecvTime(0)        ,m_nRespTime(0)        ,m_nInsertTime(0)        ,m_nSubmitTime(0)        ,m_nDoneTime(0)        ,m_nRecvRptTime(0)        ,m_nTranTime(0)        ,m_nDealTime(0)        ,m_nDeliverTime(0)        ,m_nAttime(0)        ,m_nValidtime(0)        ,m_nMsgHashCode(0)        ,m_nMwBatchId(0)        ,m_strSpMsgId()        ,m_strPtcode()        ,m_strUserBatchId()        ,m_strSvrType()        ,m_strSignature()        ,m_strMsgHash256()        ,m_strCustName()        ,m_strAccNumber()        ,m_strBankNumber()        ,m_strTransSeq()        ,m_strAccInfo()        ,m_strChangeMark()        ,m_strExitSign()        ,m_strCustNumber()        ,m_strDepartCode()        ,m_strSignOrgcode()        ,m_strReserve()        ,m_strSubmitter()        ,m_strReviewer()        ,m_strSignStatus()        ,m_strMsgSrcIp()        ,m_strSpip()        ,m_strUserId()        ,m_strPhone()        ,m_strMsgContent()        ,m_strUserCustid()        ,m_strUserExData()        ,m_strSpNumber()        ,m_strSpGate()        ,m_strCpno()        ,m_strExno()        ,m_strServiceNo()        ,m_strAuthenInfo()        ,m_strFileName()        ,m_strSeqNo()        ,m_strTplid()        ,m_strMmsTitle()        ,m_strMmsMsgPath()        ,m_strErrorCode()        ,m_strErrorCode2()        ,m_strErrorMsg()        ,m_strSubmitDate()        ,m_strDoneDate()        ,m_strFragFolder("ccb")    {    }    RemainObj(const RemainObj& that)        :m_nMsgFmt(0)        ,bitFlag_(0)        ,m_nPkNumber(0)        ,m_nPkTotal(0)        ,m_nPhoneCount(0)        ,m_nMsgLevel(0)        ,m_nEcid(0)        ,m_nPreNodeid(0)        ,m_nLocalNodeid(0)        ,m_nGateId(0)        ,m_nBatchType(0)        ,m_nRptFlag(0)        ,m_nRptFrom(0)        ,m_nTpudhi(0)        ,m_nTppid(0)        ,m_nLongMsgSeq(0)        ,m_nChargeNum(0)        ,m_nSignPos(0)        ,m_nFileSize(0)        ,m_nMmstype(0)        ,m_nMobileCountry(0)        ,m_nMobileArea(0)        ,m_nMobileCity(0)        ,m_nMobileType(0)        ,m_nFeeFlag(0)        ,m_nChargeType(0)        ,m_nChargeRate(0)        ,m_nMsgSeqId(0)        ,m_nDttype(0)        ,m_nSendFlag(0)        ,m_nPassThrough(0)        ,m_nPtMsgId(0)        ,m_nSuppMsgId(0)        ,m_nInitMgsId(0)        ,m_nCreateTime(0)        ,m_nRecvTime(0)        ,m_nRespTime(0)        ,m_nInsertTime(0)        ,m_nSubmitTime(0)        ,m_nDoneTime(0)        ,m_nRecvRptTime(0)        ,m_nTranTime(0)        ,m_nDealTime(0)        ,m_nDeliverTime(0)        ,m_nAttime(0)        ,m_nValidtime(0)        ,m_nMsgHashCode(0)        ,m_nMwBatchId(0)        ,m_strSpMsgId()        ,m_strPtcode()        ,m_strUserBatchId()        ,m_strSvrType()        ,m_strSignature()        ,m_strMsgHash256()        ,m_strCustName()        ,m_strAccNumber()        ,m_strBankNumber()        ,m_strTransSeq()        ,m_strAccInfo()        ,m_strChangeMark()        ,m_strExitSign()        ,m_strCustNumber()        ,m_strDepartCode()        ,m_strSignOrgcode()        ,m_strReserve()        ,m_strSubmitter()        ,m_strReviewer()        ,m_strSignStatus()        ,m_strMsgSrcIp()        ,m_strSpip()        ,m_strUserId()        ,m_strPhone()        ,m_strMsgContent()        ,m_strUserCustid()        ,m_strUserExData()        ,m_strSpNumber()        ,m_strSpGate()        ,m_strCpno()        ,m_strExno()        ,m_strServiceNo()        ,m_strAuthenInfo()        ,m_strFileName()        ,m_strSeqNo()        ,m_strTplid()        ,m_strMmsTitle()        ,m_strMmsMsgPath()        ,m_strErrorCode()        ,m_strErrorCode2()        ,m_strErrorMsg()        ,m_strSubmitDate()        ,m_strDoneDate()        ,m_strFragFolder("ccb")    {        *this = that;    }    RemainObj& operator=(const RemainObj& that)    {        if (this == &that) return *this;        m_nMsgFmt = that.m_nMsgFmt;        bitFlag_ = that.bitFlag_;        m_nPkNumber = that.m_nPkNumber;        m_nPkTotal = that.m_nPkTotal;        m_nPhoneCount = that.m_nPhoneCount;        m_nMsgLevel = that.m_nMsgLevel;        m_nEcid = that.m_nEcid;        m_nPreNodeid = that.m_nPreNodeid;        m_nLocalNodeid = that.m_nLocalNodeid;        m_nGateId = that.m_nGateId;        m_nBatchType = that.m_nBatchType;        m_nRptFlag = that.m_nRptFlag;        m_nRptFrom = that.m_nRptFrom;        m_nTpudhi = that.m_nTpudhi;        m_nTppid = that.m_nTppid;        m_nLongMsgSeq = that.m_nLongMsgSeq;        m_nChargeNum = that.m_nChargeNum;        m_nSignPos = that.m_nSignPos;        m_nFileSize = that.m_nFileSize;        m_nMmstype = that.m_nMmstype;        m_nMobileCountry = that.m_nMobileCountry;        m_nMobileArea = that.m_nMobileArea;        m_nMobileCity = that.m_nMobileCity;        m_nMobileType = that.m_nMobileType;        m_nFeeFlag = that.m_nFeeFlag;        m_nChargeType = that.m_nChargeType;        m_nChargeRate = that.m_nChargeRate;        m_nMsgSeqId = that.m_nMsgSeqId;        m_nDttype = that.m_nDttype;        m_nSendFlag = that.m_nSendFlag;        m_nPassThrough = that.m_nPassThrough;        m_nPtMsgId = that.m_nPtMsgId;        m_nSuppMsgId = that.m_nSuppMsgId;        m_nInitMgsId = that.m_nInitMgsId;        m_nCreateTime = that.m_nCreateTime;        m_nRecvTime = that.m_nRecvTime;        m_nRespTime = that.m_nRespTime;        m_nInsertTime = that.m_nInsertTime;        m_nSubmitTime = that.m_nSubmitTime;        m_nDoneTime = that.m_nDoneTime;        m_nRecvRptTime = that.m_nRecvRptTime;        m_nTranTime = that.m_nTranTime;        m_nDealTime = that.m_nDealTime;        m_nDeliverTime = that.m_nDeliverTime;        m_nAttime = that.m_nAttime;        m_nValidtime = that.m_nValidtime;        m_nMsgHashCode = that.m_nMsgHashCode;        m_nMwBatchId = that.m_nMwBatchId;        m_strSpMsgId = that.m_strSpMsgId;        m_strPtcode = that.m_strPtcode;        m_strUserBatchId = that.m_strUserBatchId;        m_strSvrType = that.m_strSvrType;        m_strSignature = that.m_strSignature;        m_strMsgHash256 = that.m_strMsgHash256;        m_strCustName = that.m_strCustName;        m_strAccNumber = that.m_strAccNumber;        m_strBankNumber = that.m_strBankNumber;        m_strTransSeq = that.m_strTransSeq;        m_strAccInfo = that.m_strAccInfo;        m_strChangeMark = that.m_strChangeMark;        m_strExitSign = that.m_strExitSign;        m_strCustNumber = that.m_strCustNumber;        m_strDepartCode = that.m_strDepartCode;        m_strSignOrgcode = that.m_strSignOrgcode;        m_strReserve = that.m_strReserve;        m_strSubmitter = that.m_strSubmitter;        m_strReviewer = that.m_strReviewer;        m_strSignStatus = that.m_strSignStatus;        m_strMsgSrcIp = that.m_strMsgSrcIp;        m_strSpip = that.m_strSpip;        m_strUserId = that.m_strUserId;        m_strPhone = that.m_strPhone;        m_strMsgContent = that.m_strMsgContent;        m_strUserCustid = that.m_strUserCustid;        m_strUserExData = that.m_strUserExData;        m_strSpNumber = that.m_strSpNumber;        m_strSpGate = that.m_strSpGate;        m_strCpno = that.m_strCpno;        m_strExno = that.m_strExno;        m_strServiceNo = that.m_strServiceNo;        m_strAuthenInfo = that.m_strAuthenInfo;        m_strFileName = that.m_strFileName;        m_strSeqNo = that.m_strSeqNo;        m_strTplid = that.m_strTplid;        m_strMmsTitle = that.m_strMmsTitle;        m_strMmsMsgPath = that.m_strMmsMsgPath;        m_strErrorCode = that.m_strErrorCode;        m_strErrorCode2 = that.m_strErrorCode2;        m_strErrorMsg = that.m_strErrorMsg;        m_strSubmitDate = that.m_strSubmitDate;        m_strDoneDate = that.m_strDoneDate;        m_strFragFolder = that.m_strFragFolder;        return *this;    }
    ~RemainObj()    {    }    int m_nMsgFmt;            //编码方式    int bitFlag_;                       //参考文件上方的宏定义，区分各种状态    int m_nPkNumber;                    //上行状态报告数(长短信用:非长短信为0,长短信:对应拆分的条数)    int m_nPkTotal;    int m_nPhoneCount;                  //下行中电话号码个数    int m_nMsgLevel;                    //下行消息级别    int m_nEcid;                        //企业id    int m_nPreNodeid;                   //写这条消息的上级nodeid    int m_nLocalNodeid;                 //写这条消息的nodeid    int m_nGateId;                      //通道id    int m_nBatchType;                   //    int m_nRptFlag;                     //下行是否需要状态报告标志    int m_nRptFrom;                     //状态报告来源，0：未知1：运营商原始状态报告2：平台模拟的状态报告      int m_nTpudhi;    int m_nTppid;    int m_nLongMsgSeq;    int m_nChargeNum;    int m_nSignPos;    int m_nFileSize;                    // 彩信文件大小    int m_nMmstype;                     //彩信消息类型    int m_nMobileCountry;    int m_nMobileArea;    int m_nMobileCity;    int m_nMobileType;    int m_nFeeFlag;    int m_nChargeType;                  //批量短信：计费类型    int m_nChargeRate;                  //批量短信：费率    int m_nMsgSeqId;    int m_nDttype;    int m_nSendFlag;    int m_nPassThrough;                    //透传字段    int64_t m_nPtMsgId;                 //平台流水号    int64_t m_nSuppMsgId;               //补发流水号    int64_t m_nInitMgsId;               //长短信首条流水号    int64_t m_nCreateTime;    int64_t m_nRecvTime;                //接收时间，精确到毫秒    int64_t m_nRespTime;                //响应时间，精确到毫秒    int64_t m_nInsertTime;              //插入redis时间，精确到毫秒    int64_t m_nSubmitTime;              //下行提交运营商时间    int64_t m_nDoneTime;                //下行提交运营商收到响应时间    int64_t m_nRecvRptTime;             //转发服务接收状态时间    int64_t m_nTranTime;                //转发时间    int64_t m_nDealTime;                //业务开始处理时间，一般从redis中读出来时间    int64_t m_nDeliverTime;             //运营商收到用户上行时间    int64_t m_nAttime;    int64_t m_nValidtime;    int64_t m_nMsgHashCode;    int64_t m_nMwBatchId;              //    std::string m_strSpMsgId;          //运营商流水号    std::string m_strPtcode;    std::string m_strUserBatchId;    std::string m_strSvrType;    std::string m_strSignature;    std::string m_strMsgHash256;    std::string m_strCustName;          //批量短信：客户姓名    std::string m_strAccNumber;         //批量短信：账号    std::string m_strBankNumber;        //批量短信：账户隶属机构行号    std::string m_strTransSeq;          //批量短信：交易流水号    std::string m_strAccInfo;           //批量短信：账户信息    std::string m_strChangeMark;        //批量短信：账户变动通知标志    std::string m_strExitSign;          //批量短信：出口标志    std::string m_strCustNumber;        //批量短信：客户号    std::string m_strDepartCode;        //批量短信：分行部门代码    std::string m_strSignOrgcode;       //批量短信：签约网点机构编码    std::string m_strReserve;           //批量短信：保留    std::string m_strSubmitter;         //批量短信：营销短信提交人    std::string m_strReviewer;          //批量短信：营销短信复核人    std::string m_strSignStatus;        //批量短信：签约状态Y/N     std::string m_strMsgSrcIp;          //下行提交客户ip地址    std::string m_strSpip;              //运营商ip地址    std::string m_strUserId;            //用户账号    std::string m_strPhone;             //可以写多个号码    std::string m_strMsgContent;        //消息内容    std::string m_strUserCustid;    std::string m_strUserExData;        //用户扩展字段        std::string m_strSpNumber;          //全通道号    std::string m_strSpGate;            //住通道号    std::string m_strCpno;              //扩展子好    std::string m_strExno;              //用户扩展子好    std::string m_strServiceNo;         //彩信        std::string m_strAuthenInfo;        //彩信    std::string m_strFileName;          //彩信    std::string m_strSeqNo;             //彩信    std::string m_strTplid;             //彩信    std::string m_strMmsTitle;          //彩信    std::string m_strMmsMsgPath;        //彩信    std::string m_strErrorCode;         //状态,仅仅对状态报告有效    std::string m_strErrorCode2;        //状态,仅仅对状态报告有效    std::string m_strErrorMsg;          //状态,仅仅对状态报告有效    std::string m_strSubmitDate;        //发送时间yyyymmddHHMMSS    std::string m_strDoneDate;          //接收时间yyyymmddHHMMSS    std::string m_strFragFolder;       //用作第二层分目录使用，传统的是使用用户名，建行的可以自己设置，也有默认值};typedef std::shared_ptr<RemainObj> RemainObjPtr;typedef std::vector<RemainObjPtr> RemainObjPtrVect;/**标志位参考文件上方宏定义，分别是状态包、上行短信、下行短信*读文件优先读本地路径下的信息，*写文件优先写共享路径下的信息**/class RemainObjMgr : public noncopyable{public:    RemainObjMgr();
    ~RemainObjMgr();
    static RemainObjMgr& instance() { return Singleton<RemainObjMgr>::instance();}    /*     *模块退出接口，清除所有资源     *     *     */    void remainObjMgrExit();
    /*     *第1个参数是网关编号     *第2个参数是每个文件最多保存多少条     *第3个参数是超时切换一个文件，单位秒钟     *第4个参数是共享目录路径，如果为空，则不处理共享目录，路径都是根目录，根目录下的路径就是固定的了     *第5个参数是本地目录路径，如果为空，默认是相对路径下的对应文件夹，路径都是根目录，根目录下的路径就是固定的了     *     *返回值，==0的时候表示正常，小于0表示错误     */    int remainObjMgrInit(uint32_t gateNo, int maxCount = 50, int outSeconds = 60, const std::string& sharePath = "", const std::string& localPath = "");
    /*     *写滞留，根据obj.bitFlag_区分类型     *     *返回值，==0的时候表示正常，小于0表示错误     */    int writeRemainObject(const RemainObjPtr& obj);    /*     *写滞留，根据obj.bitFlag_区分类型     *这个写进去之后就再也不会发送了，除非人工干预，下行接口慎重     *     *返回值，==0的时候表示正常，小于0表示错误     */    int writeRemainObjectBak(const RemainObjPtr& obj);
    /*     *读滞留，根据bitFlag区分读数据类型     *     *     *返回值，==0的时候表示正常，小于0表示错误     */    int readRemainObject(int bitFlag, RemainObjPtrVect& objVect, const std::string& fragFolder = "ccb");
    /*     *统计滞留数量，分别统计本地滞留数量，以及共享目录统计数量     *     *     *返回值，==0的时候表示正常，小于0表示错误     */    int statisticsRemainCount(int bitFlag, const std::string& fragFolder, int& localCount, int& shareCount);    /*     *检索文件是否超时，超时则关闭文件     *     *     */    void everySecondCheck(uint64_t second = 0);    void updateGenFreq(int freq = 60);    void updateMaxFileSize(int size = 20);//////////////////////////////////////////////////////////////////////////////////////////////////    std::string transReToString(const RemainObjPtr& obj);    std::string transMoToString(const RemainObjPtr& obj);    std::string transMtToString(const RemainObjPtr& obj);private:    int transStringToRe(const char* pBuf, RemainObjPtrVect& objVect);    int transStringToMo(const char* pBuf, RemainObjPtrVect& objVect);    int transStringToMt(const char* pBuf, RemainObjPtrVect& objVect);    int transStringToObject(int bigFlag, const std::string& fragFolder, const std::string& remainData, RemainObjPtrVect& objVect);    int isExit_;    int isInit_;    int gateNo_;    int maxCount_;    int outSecond_;    std::string sharePath_;    std::string localPath_;};
}#endif