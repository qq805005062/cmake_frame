redis 请求异步实现：

此实例是实现的libevent异步redis请求的示例，

最好是可以将请求放在IO线程处理，但是目前多线程编程基础比较薄弱，暂时还没有实现。

此示例的办法是在hiredis中加锁，而且加的是全局锁，调试的时候，发现这个锁加在redisContext结构体中无法正常测试，连接不成功，

redisAsyncContext这个结构体中加锁还没有试，

一定要调用evthread_use_pthreads方法，告诉libevent使用多线程

目前是在全局加锁，全局加锁就是无论多少个线程都是竞争同一把锁，但是结构体中加锁，则相关线程竞争同一把锁。

加锁见文件async.c。

总算把异步功能调试通了。

下面应该想办法进一步数据libevent多线程编程、多线程唤醒，多线程中夸线程协同工作。

然后就是redis单点、集群使用异步方法

